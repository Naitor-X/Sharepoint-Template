# Mehrere Apps auf einer SharePoint-Seite - Korrekte Konfiguration

## üî• Problem mit globalen Variablen vermeiden

**Problem:** Apps √ºberschreiben sich gegenseitig die `window.customApp*` Variablen

**L√∂sung:** App-spezifische Container und Konfiguration

---

## ‚úÖ Korrekte Implementierung f√ºr mehrere Apps

### 1. Ansprechpersonen App
```html
<div id="ansprechpersonen-container"></div>
<script>
// ===========================================
// ANSPRECHPERSONEN KONFIGURATION
// ===========================================
var ansprechpersonenListPath = "Ansprechpersonen"; // Nur diese App
var ansprechpersonenScriptUrl = "/sites/apps/ansprechpersonen.html";

// App-spezifische Konfiguration
function configureAnsprechpersonenApp() {
    // Setze Variablen NUR f√ºr diese App
    window.customAnsprechpersonenListPath = ansprechpersonenListPath;
    if (ansprechpersonenSiteUrl) {
        window.customAnsprechpersonenSiteUrl = ansprechpersonenSiteUrl;
    }
}

// Laden der Ansprechpersonen-App
fetch(ansprechpersonenScriptUrl)
    .then(response => {
        if (!response.ok) throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        return response.text();
    })
    .then(html => {
        document.getElementById('ansprechpersonen-container').innerHTML = html;
        
        // Konfiguration f√ºr DIESE App setzen
        configureAnsprechpersonenApp();
        
        // JavaScript ausf√ºhren
        var scripts = document.getElementById('ansprechpersonen-container').getElementsByTagName('script');
        for (var i = 0; i < scripts.length; i++) {
            eval(scripts[i].innerHTML);
        }
    })
    .catch(error => {
        console.error('Ansprechpersonen App Error:', error);
        document.getElementById('ansprechpersonen-container').innerHTML = `
            <div style="padding:15px;background:#fee;border:1px solid #fcc;border-radius:5px;color:#c00;">
                <strong>Ansprechpersonen Fehler:</strong> ${error.message}
            </div>
        `;
    });
</script>
```

### 2. Header-Cards App (Version 1)
```html
<div id="header-cards-v1-container"></div>
<script>
// ===========================================
// HEADER-CARDS KONFIGURATION
// ===========================================
var headerCardsListPath = "zz_config_startseite_top"; // Nur diese App
var headerCardsScriptUrl = "/sites/apps/header-card-menu_v1.html";

// App-spezifische Konfiguration
function configureHeaderCardsApp() {
    // Setze Variablen NUR f√ºr diese App
    window.customAppListPath = headerCardsListPath;
    if (headerCardsSiteUrl) {
        window.customAppSiteUrl = headerCardsSiteUrl;
    }
}

// Laden der Header-Cards-App
fetch(headerCardsScriptUrl)
    .then(response => {
        if (!response.ok) throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        return response.text();
    })
    .then(html => {
        document.getElementById('header-cards-v1-container').innerHTML = html;
        
        // Konfiguration f√ºr DIESE App setzen
        configureHeaderCardsApp();
        
        // JavaScript ausf√ºhren
        var scripts = document.getElementById('header-cards-v1-container').getElementsByTagName('script');
        for (var i = 0; i < scripts.length; i++) {
            eval(scripts[i].innerHTML);
        }
    })
    .catch(error => {
        console.error('Header-Cards App Error:', error);
        document.getElementById('header-cards-v1-container').innerHTML = `
            <div style="padding:15px;background:#fee;border:1px solid #fcc;border-radius:5px;color:#c00;">
                <strong>Header-Cards Fehler:</strong> ${error.message}
            </div>
        `;
    });
</script>
```

### 3. Weitere App (Beispiel)
```html
<div id="weitere-app-container"></div>
<script>
// ===========================================
// WEITERE APP KONFIGURATION
// ===========================================
var weitereAppListPath = "Meine_Andere_Liste";
var weitereAppScriptUrl = "/sites/apps/weitere-app.html";

// App-spezifische Konfiguration
function configureWeitereApp() {
    // Eindeutige Variablen f√ºr diese App
    window.customWeitereAppListPath = weitereAppListPath;
}

// Laden der weiteren App
fetch(weitereAppScriptUrl)
    .then(response => {
        if (!response.ok) throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        return response.text();
    })
    .then(html => {
        document.getElementById('weitere-app-container').innerHTML = html;
        configureWeitereApp();
        
        var scripts = document.getElementById('weitere-app-container').getElementsByTagName('script');
        for (var i = 0; i < scripts.length; i++) {
            eval(scripts[i].innerHTML);
        }
    })
    .catch(error => {
        console.error('Weitere App Error:', error);
        document.getElementById('weitere-app-container').innerHTML = `
            <div style="padding:15px;background:#fee;border:1px solid #fcc;border-radius:5px;color:#c00;">
                <strong>Weitere App Fehler:</strong> ${error.message}
            </div>
        `;
    });
</script>
```

---

## üîß Bessere L√∂sung: Namespace-Pattern

### Universal App-Loader mit Namespaces
```html
<div id="app-ansprechpersonen"></div>
<div id="app-header-cards"></div>
<div id="app-weitere"></div>

<script>
// Universal App-Loader f√ºr mehrere Apps
class SharePointAppLoader {
    constructor() {
        this.apps = new Map();
    }
    
    // App registrieren
    registerApp(appId, config) {
        this.apps.set(appId, {
            containerId: config.containerId,
            scriptUrl: config.scriptUrl,
            listPath: config.listPath,
            siteUrl: config.siteUrl || '',
            configVarName: config.configVarName,
            loaded: false
        });
    }
    
    // App laden
    async loadApp(appId) {
        const app = this.apps.get(appId);
        if (!app) {
            console.error(`App ${appId} nicht registriert`);
            return;
        }
        
        try {
            const response = await fetch(app.scriptUrl);
            if (!response.ok) throw new Error(`HTTP ${response.status}`);
            
            const html = await response.text();
            document.getElementById(app.containerId).innerHTML = html;
            
            // App-spezifische Konfiguration setzen
            if (app.configVarName && app.listPath) {
                window[app.configVarName] = app.listPath;
            }
            if (app.siteUrl) {
                window[app.configVarName.replace('ListPath', 'SiteUrl')] = app.siteUrl;
            }
            
            // Scripts ausf√ºhren
            const scripts = document.getElementById(app.containerId).getElementsByTagName('script');
            for (let i = 0; i < scripts.length; i++) {
                eval(scripts[i].innerHTML);
            }
            
            app.loaded = true;
            console.log(`App ${appId} erfolgreich geladen`);
            
        } catch (error) {
            console.error(`Fehler beim Laden von App ${appId}:`, error);
            document.getElementById(app.containerId).innerHTML = `
                <div style="padding:15px;background:#fee;border:1px solid #fcc;border-radius:5px;color:#c00;">
                    <strong>${appId} Fehler:</strong> ${error.message}<br>
                    <small>URL: ${app.scriptUrl}</small>
                </div>
            `;
        }
    }
    
    // Alle Apps laden
    async loadAllApps() {
        for (const [appId] of this.apps) {
            await this.loadApp(appId);
        }
    }
}

// App-Loader initialisieren
const appLoader = new SharePointAppLoader();

// Apps registrieren
appLoader.registerApp('ansprechpersonen', {
    containerId: 'app-ansprechpersonen',
    scriptUrl: '/sites/apps/ansprechpersonen.html',
    listPath: 'Ansprechpersonen',
    configVarName: 'customAnsprechpersonenListPath'
});

appLoader.registerApp('header-cards', {
    containerId: 'app-header-cards',
    scriptUrl: '/sites/apps/header-card-menu_v1.html',
    listPath: 'zz_config_startseite_top',
    configVarName: 'customAppListPath'
});

appLoader.registerApp('weitere', {
    containerId: 'app-weitere',
    scriptUrl: '/sites/apps/weitere-app.html',
    listPath: 'Meine_Liste',
    configVarName: 'customWeitereAppListPath'
});

// Alle Apps laden
appLoader.loadAllApps();
</script>
```

---

## üìã Einfache L√∂sung: Sequentielle Konfiguration

Wenn Sie die einfachere L√∂sung bevorzugen:

```html
<!-- App 1: Ansprechpersonen -->
<div id="ansprechpersonen-container"></div>
<script>
(function() {
    // Lokale Konfiguration
    const config = {
        listPath: "Ansprechpersonen",
        scriptUrl: "/sites/apps/ansprechpersonen.html",
        containerId: "ansprechpersonen-container"
    };
    
    fetch(config.scriptUrl)
        .then(response => response.text())
        .then(html => {
            document.getElementById(config.containerId).innerHTML = html;
            
            // Nur f√ºr diese App
            window.customAnsprechpersonenListPath = config.listPath;
            
            // Scripts ausf√ºhren
            const scripts = document.getElementById(config.containerId).getElementsByTagName('script');
            for (let i = 0; i < scripts.length; i++) {
                eval(scripts[i].innerHTML);
            }
        })
        .catch(error => console.error('Ansprechpersonen Error:', error));
})();
</script>

<!-- App 2: Header-Cards -->
<div id="header-cards-container"></div>
<script>
(function() {
    // Lokale Konfiguration
    const config = {
        listPath: "zz_config_startseite_top",
        scriptUrl: "/sites/apps/header-card-menu_v1.html",
        containerId: "header-cards-container"
    };
    
    fetch(config.scriptUrl)
        .then(response => response.text())
        .then(html => {
            document.getElementById(config.containerId).innerHTML = html;
            
            // Nur f√ºr diese App
            window.customAppListPath = config.listPath;
            
            // Scripts ausf√ºhren
            const scripts = document.getElementById(config.containerId).getElementsByTagName('script');
            for (let i = 0; i < scripts.length; i++) {
                eval(scripts[i].innerHTML);
            }
        })
        .catch(error => console.error('Header-Cards Error:', error));
})();
</script>
```

---

## ‚ö†Ô∏è Wichtige Punkte

### 1. Container-IDs
Jede App braucht eine **eindeutige Container-ID**:
- `ansprechpersonen-container`
- `header-cards-v1-container`
- `weitere-app-container`

### 2. Timing
Apps werden **sequentiell** geladen, nicht parallel, um Konflikte zu vermeiden.

### 3. Namespace-Variablen
Jede App verwendet **eigene Konfigurationsvariablen**:
- `customAnsprechpersonenListPath`
- `customAppListPath`
- `customWeitereAppListPath`

### 4. IIFE Pattern
Verwendung von **sofort ausgef√ºhrten Funktionen** `(function() { ... })()` verhindert globale Variablenkonflikte.

---

**üéØ Diese L√∂sung erm√∂glicht mehrere Apps auf einer Seite ohne Konflikte!**